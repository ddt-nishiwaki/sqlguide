本文にも書いたように、SQLで差集合演算を実現する方法は多くあります。
文中ではEXCEPTとNOT IN を使ったものを紹介しました。
ここではNOT EXISTSと外部結合を使う方法を考えて見てください。

(SeqTbl)      (Sequence)
+-----+       +-----+
| seq |       | seq |
+-----+       +-----+
|   1 |       |   0 |
|   2 |       |   1 |
|   4 |       ~~~~~~~
|   5 |       | 994 |
|   6 |       | 995 |
|   7 |       | 996 |
|   8 |       | 997 |
|  11 |       | 998 |
|  12 |       | 999 |
+-----+       +-----+


/* 欠番を全部求める：EXCEPTバージョン (p.163) */       /* 欠番を全部求める：NOT INバージョン (p.163) */
SELECT seq                                         SELECT seq
  FROM Sequence                                      FROM Sequence
 WHERE seq BETWEEN 1 AND 12                         WHERE seq BETWEEN 1 AND 12
EXCEPT                                                AND seq NOT IN (SELECT seq FROM SeqTbl);
SELECT seq FROM SeqTbl;

                                                      +-----+
 seq                                                  | seq |
-----                                                 +-----+
   3                                                  |   3 |
   9                                                  |   9 |
  10                                                  |  10 |
                                                      +-----+


解答：

/* NOT EXISTバージョン */
seqTblの値がsequenceに存在しているということはない

SELECT                                     -- SeqTblの'歯抜け'データを特定するために連番データとの差分抽出を行う
	Sequence.seq                           -- 連番データを取得するカラムを設定する
FROM                                       -- データを取り出すためのテーブルを指定する
	Sequence                               -- 連番データを指定する
WHERE                                      -- データが巨大なので範囲を絞る
	Sequence.seq BETWEEN                   -- 差分抽出に必要なデータ範囲を特定するための設定を行う
		(
			SELECT                         -- データ範囲の最小値を設定する
				MIN(SeqTbl.seq)            -- データ範囲の最小値を取得するカラムを設定する
			FROM                           -- 以下データの最小値を取得する
				SeqTbl                     -- '歯抜け'データの抽出対象を設定する
		)
	AND
		(
			SELECT                         -- データ範囲の最大値を設定する
				MAX(SeqTbl.seq)            -- データ範囲の最大値を取得するカラムを設定する
			FROM                           -- 以下データの最大値を取得する
				SeqTbl                     -- '歯抜け'データの抽出対象を設定する
		)
AND                                        -- 差分データのみ取得するための条件を設定する
	NOT EXISTS (                           -- 全称量化による条件設定を行う
		SELECT                             -- 除外するデータを設定する
			SeqTbl.seq                     -- 除外データを取り出すカラムを設定する
		FROM                               -- データを取り出すためのテーブルを設定する
			SeqTbl                         -- 除外データを取得するためのテーブルを指定する
		WHERE                              -- 除外する条件を指定する
			Sequence.seq = SeqTbl.seq      -- 連番データに存在しているものを除外する
	);

+-----+
| seq |
+-----+
|   3 |
|   9 |
|  10 |
+-----+



/* 外部結合バージョン */

SELECT                                     -- SeqTblの'歯抜け'データを特定するために連番データとの差分抽出を行う
	Sequence.seq                           -- 連番データを取得するカラムを設定する
FROM                                       -- データを取り出すためのテーブルを指定する
	Sequence                               -- 連番データを指定する
LEFT JOIN                                  -- 差分抽出の為に外部結合を行う
	SeqTbl                                 -- 歯抜けデータと結合する
ON                                         -- 結合条件を指定する
	SeqTbl.seq = Sequence.seq              -- 歯抜けレコードがNULLになるように結合する
WHERE                                      -- 歯抜けレコードのみ抽出する設定を行う
	SeqTbl.seq IS NULL                     -- 歯抜けを示すNULLをもつレコードを抽出する
AND                                        -- 連番データ範囲が巨大なので範囲を絞る
	Sequence.seq BETWEEN                   -- 範囲となる最小値と最大値を設定する
		(
			SELECT                         -- データ範囲の最小値を取得する
				MIN(SeqTbl.seq)            -- 最小値を取得するカラムを設定する
			FROM                           -- 以下データより範囲の最小値を特定する
				SeqTbl                     -- 歯抜けデータを指定する
		)
	AND                                    -- 範囲の終端を設定する
		(
			SELECT                         -- データ範囲の最大値を取得する
				MAX(SeqTbl.seq)            -- 最大値取得のためのカラムを設定する
			FROM                           -- 以下データより範囲の最大値を特定する
				SeqTbl                     -- 歯抜けデータを指定する
		)
;

+-----+
| seq |
+-----+
|   3 |
|   9 |
|  10 |
+-----+
