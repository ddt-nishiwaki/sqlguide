「三人なんですけど座れますか？」では、NOT EXISTS で全称量化を表現する事によって、シーケンスを求めました。これをHAVING句を使って書き換えてください。
行に折り返しがないケースが溶けたら、折り返しのあるケースも考えてみてください。

※ タイトル通り @head_cnt = 3 とする



/* 人数分の空席を探す　その1：行の折り返しを考慮しない (p.165) */
SELECT S1.seat   AS start_seat, '～' , S2.seat AS end_seat
  FROM Seats S1, Seats S2
 WHERE S2.seat = S1.seat + (@head_cnt -1)  /* 始点と終点を決める */
   AND NOT EXISTS
          (SELECT *
             FROM Seats S3
            WHERE S3.seat BETWEEN S1.seat AND S2.seat
              AND S3.status <> '空' )
ORDER BY start_seat;

+------------+-----+----------+
| start_seat | ～  | end_seat |
+------------+-----+----------+
|          3 | ～  |        5 |
|          7 | ～  |        9 |
|          8 | ～  |       10 |
|          9 | ～  |       11 |
+------------+-----+----------+


/* 人数分の空席を探す　その2：行の折り返しも考慮する (p.167) */
SELECT S1.seat   AS start_seat, '～' , S2.seat AS end_seat
  FROM Seats2 S1, Seats2 S2
 WHERE S2.seat = S1.seat + (@head_cnt -1)
   AND NOT EXISTS
          (SELECT *
             FROM Seats2 S3
            WHERE S3.seat BETWEEN S1.seat AND S2.seat
              AND (    S3.status <> '空'
                    OR S3.row_id <> S1.row_id))
ORDER BY start_seat;

+------------+-----+----------+
| start_seat | ～  | end_seat |
+------------+-----+----------+
|          3 | ～  |        5 |
|          8 | ～  |       10 |
|         11 | ～  |       13 |
+------------+-----+----------+


解答：


/* HAVING を使った書き換え: 折り返しがないパターン */
SELECT                                        -- 座席データから3人並んで座れる場所を検索する
	S1.seat AS start_seat,                    -- 空席範囲の始点を示すカラムを設定する
	S2.seat AS end_seat                       -- 空席範囲の終点を示すカラムを設定する
FROM                                          -- 座席データを多次元的に調べる
	Seats S1,                                 -- 座席範囲の始点データを持つためのテーブルを定義する
	Seats S2,                                 -- 座席範囲の終点データを持つためのテーブルを定義する
	Seats S3                                  -- 座席範囲の空席状態を持つためのテーブルを定義する
WHERE                                         -- 終点データ用のテーブルを設定する
	S2.seat = S1.seat + (@head_cnt -1)        -- 指定人数が座れる座席範囲を設定する
AND                                           -- 空席情報を持つテーブルを設定する
	S3.seat BETWEEN S1.seat AND S2.seat       -- 空席状態を調べる範囲を設定する
GROUP BY                                      -- 空席情報の集合をとるために以下データをまとめる
	S1.seat, S2.seat                          -- 始点と終点情報についてまとめる
HAVING                                        -- まとめた空席情報の集合から'座れる'場所を特定する
	COUNT(*) = SUM(                           -- 空席の数が指定人数と一致するか調べる
		CASE WHEN S3.status = '空'            -- 空席状態の場合は
		THEN 1                                -- カウントする
		ELSE 0                                -- そうでなければカウントしない
		END                                   -- 上記条件で空席を数える
	)
;

+------------+----------+
| start_seat | end_seat |
+------------+----------+
|          3 |        5 |
|          7 |        9 |
|          8 |       10 |
|          9 |       11 |
+------------+----------+



/* HAVING を使った書き換え: 折り返し有りパターン */
SELECT                                                 -- 座席データから3人並んで座れる場所を検索する
	S1.seat AS start_seat,                             -- 空席範囲の始点を示すカラムを設定する
	S2.seat AS end_seat                                -- 空席範囲の終点を示すカラムを設定する
FROM                                                   -- 座席データを多次元的に調べる
	Seats2 S1,                                         -- 座席範囲の始点データを持つためのテーブルを定義する
	Seats2 S2,                                         -- 座席範囲の終点データを持つためのテーブルを定義する
	Seats2 S3                                          -- 座席範囲の空席状態を持つためのテーブルを定義する
WHERE                                                  -- 終点データ用のテーブルを設定する
	S2.seat = S1.seat + (@head_cnt -1)                 -- 指定人数が座れる座席範囲を設定する
AND                                                    -- 空席情報を持つテーブルを設定する
	S3.seat BETWEEN S1.seat AND S2.seat                -- 空席状態を調べる範囲を設定する
GROUP BY                                               -- 空席情報の集合をとるために以下データをまとめる
	S1.seat, S2.seat                                   -- 始点と終点情報についてまとめる
HAVING                                                 -- まとめた空席情報の集合から'座れる'場所を特定する
	COUNT(*) = SUM(                                    -- 空席の数が指定人数と一致するか調べる
		CASE WHEN                                      -- 空席判定の条件を設定する
			S3.status = '空'                           -- 空席状態が 空 の時で
		AND                                            -- かつ
			S3.row_id = S1.row_id                      -- 列が同じ場合は
		THEN 1                                         -- カウントする
		ELSE 0                                         -- そうでなければカウントしない
		END                                            -- 上記条件で空席を数える
	)
;
+------------+----------+
| start_seat | end_seat |
+------------+----------+
|          3 |        5 |
|          8 |       10 |
|         11 |       13 |
+------------+----------+


